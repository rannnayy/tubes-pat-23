-- This file was generated by tern gengen v2.2.0-pre.
--
-- If using psql to execute this script use the --no-psqlrc, --tuples-only,
-- --quiet, and --no-align options to only output the migration SQL.
--
-- e.g. psql --no-psqlrc --tuples-only --quiet --no-align -f this_file.sql
--
-- The results can be redirected to a file where the proposed changes can be
-- inspected or the results can be piped back into psql to migrate immediately.
--
-- e.g. psql --no-psqlrc --tuples-only --quiet --no-align -f this_file.sql | psql

set tern.version = -1;
do $$
declare
	schema_version_table_exists boolean;
begin
	select to_regclass('public.schema_version') is not null into schema_version_table_exists;
	if schema_version_table_exists then
		perform set_config('tern.version', version::text, false) from public.schema_version;
	end if;
end
$$;

with migrations(version, up_sql) as (
	values
	(0,
$tern_gengen$
begin;
create table public.schema_version(version int4 not null);
insert into public.schema_version(version) values(0);
$tern_gengen$)

, (1,
$tern_gengen$
-- 001_users.sql
begin;
CREATE TABLE users (
  id        UUID        PRIMARY KEY DEFAULT gen_random_uuid(),
  username  VARCHAR(32) NOT NULL UNIQUE,
  password  TEXT        NOT NULL
);$tern_gengen$)

, (2,
$tern_gengen$
-- 002_bookings.sql
begin;
CREATE TYPE booking_status AS ENUM ('success', 'failure', 'processing');

CREATE TABLE bookings (
  id            UUID            PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id       UUID            NOT NULL REFERENCES users(id),
  event_id      UUID            NOT NULL,
  chair_id      UUID            NOT NULL,
  status        booking_status  NOT NULL DEFAULT 'processing',
  created_at    TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
  updated_at    TIMESTAMP       DEFAULT CURRENT_TIMESTAMP     
);

CREATE  FUNCTION update_booking_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_booking
  BEFORE UPDATE
  ON
    bookings
  FOR EACH ROW
EXECUTE PROCEDURE update_booking_timestamp();$tern_gengen$)

)
select up_sql || '
update public.schema_version set version = ' || version || ';
commit;
'
from migrations
where version > current_setting('tern.version')::int4
order by version asc;

